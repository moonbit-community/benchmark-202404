package moonbitlang/core/option

// Values
fn empty[T]() -> Option[T]

fn some[T](T) -> Option[T]

fn unless[T](Bool, () -> T) -> Option[T]

fn when[T](Bool, () -> T) -> Option[T]

// Types and methods
fn Option::bind[T, U](Option[T], (T) -> Option[U]) -> Option[U]
fn Option::compare[X : Compare + Eq](Option[X], Option[X]) -> Int
fn Option::default[X]() -> Option[X]
fn Option::filter[T](Option[T], (T) -> Bool) -> Option[T]
fn Option::flatten[T](Option[Option[T]]) -> Option[T]
fn Option::is_empty[T](Option[T]) -> Bool
fn Option::map[T, U](Option[T], (T) -> U) -> Option[U]
fn Option::or[T](Option[T], T) -> T
fn Option::or_else[T](Option[T], () -> T) -> T
fn Option::unwrap[X](Option[X]) -> X

// Traits

// Extension Methods

