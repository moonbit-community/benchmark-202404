package moonbitlang/core/vec

// Values

// Types and methods
type Vec
fn Vec::append[T](Vec[T], Vec[T]) -> Unit
fn Vec::capacity[T](Vec[T]) -> Int
fn Vec::chunk_by[T](Vec[T], (T, T) -> Bool) -> Vec[Vec[T]]
fn Vec::chunks[T](Vec[T], Int) -> Vec[Vec[T]]
fn Vec::clear[T](Vec[T]) -> Unit
fn Vec::contains[T : Eq](Vec[T], T) -> Bool
fn Vec::debug_write[T : Show](Vec[T], Buffer) -> Unit
fn Vec::dedup[T : Eq](Vec[T]) -> Unit
fn Vec::drain[T](Vec[T], Int, Int) -> Vec[T]
fn Vec::ends_with[T : Eq](Vec[T], Vec[T]) -> Bool
fn Vec::extract_if[T](Vec[T], (T) -> Bool) -> Vec[T]
fn Vec::fill[T](Vec[T], T) -> Unit
fn Vec::fill_with[T](Vec[T], () -> T) -> Unit
fn Vec::flatten[T](Vec[Vec[T]]) -> Vec[T]
fn Vec::fold_left[T, U](Vec[T], (U, T) -> U, U) -> U
fn Vec::fold_lefti[T, U](Vec[T], (Int, U, T) -> U, U) -> U
fn Vec::fold_right[T, U](Vec[T], (U, T) -> U, U) -> U
fn Vec::fold_righti[T, U](Vec[T], (Int, U, T) -> U, U) -> U
fn Vec::from_array[T](Array[T]) -> Vec[T]
fn Vec::get[T](Vec[T], Int) -> Option[T]
fn Vec::insert[T](Vec[T], Int, T) -> Unit
fn Vec::is_empty[T](Vec[T]) -> Bool
fn Vec::is_sorted[T : Compare + Eq](Vec[T]) -> Bool
fn Vec::iter[T](Vec[T], (T) -> Unit) -> Unit
fn Vec::iter_rev[T](Vec[T], (T) -> Unit) -> Unit
fn Vec::iter_revi[T](Vec[T], (Int, T) -> Unit) -> Unit
fn Vec::iteri[T](Vec[T], (Int, T) -> Unit) -> Unit
fn Vec::join[T](Vec[Vec[T]], T) -> Vec[T]
fn Vec::length[T](Vec[T]) -> Int
fn Vec::map[T](Vec[T], (T) -> T) -> Unit
fn Vec::mapi[T](Vec[T], (Int, T) -> T) -> Unit
fn Vec::new[T]() -> Vec[T]
fn Vec::op_add[T](Vec[T], Vec[T]) -> Vec[T]
fn Vec::op_as_view[T](Vec[T], Int, Int) -> VecView[T]
fn Vec::op_equal[T : Eq](Vec[T], Vec[T]) -> Bool
fn Vec::op_get[T](Vec[T], Int) -> T
fn Vec::op_set[T](Vec[T], Int, T) -> Unit
fn Vec::pop[T](Vec[T]) -> Option[T]
fn Vec::pop_exn[T](Vec[T]) -> T
fn Vec::push[T](Vec[T], T) -> Unit
fn Vec::remove[T](Vec[T], Int) -> T
fn Vec::repeat[T](Vec[T], Int) -> Vec[T]
fn Vec::reserve_capacity[T](Vec[T], Int) -> Unit
fn Vec::resize[T](Vec[T], Int, T) -> Unit
fn Vec::retain[T](Vec[T], (T) -> Bool) -> Unit
fn Vec::reverse[T](Vec[T]) -> Unit
fn Vec::search[T : Eq](Vec[T], T) -> Option[Int]
fn Vec::shrink_to_fit[T](Vec[T]) -> Unit
fn Vec::sort[T : Compare + Eq](Vec[T]) -> Unit
fn Vec::sort_by[T](Vec[T], (T, T) -> Int) -> Unit
fn Vec::sort_by_key[T, K : Compare + Eq](Vec[T], (T) -> K) -> Unit
fn Vec::split[T](Vec[T], (T) -> Bool) -> Vec[Vec[T]]
fn Vec::split_at[T](Vec[T], Int) -> Tuple[Vec[T], Vec[T]]
fn Vec::starts_with[T : Eq](Vec[T], Vec[T]) -> Bool
fn Vec::strip_prefix[T : Eq](Vec[T], Vec[T]) -> Option[Vec[T]]
fn Vec::strip_suffix[T : Eq](Vec[T], Vec[T]) -> Option[Vec[T]]
fn Vec::swap[T](Vec[T], Int, Int) -> Unit
fn Vec::to_list[T](Vec[T]) -> List[T]
fn Vec::to_string[T : Show](Vec[T]) -> String
fn Vec::with_capacity[T](Int) -> Vec[T]

type VecView
fn VecView::length[T](VecView[T]) -> Int
fn VecView::op_as_view[T](VecView[T], Int, Int) -> VecView[T]
fn VecView::op_get[T](VecView[T], Int) -> T
fn VecView::op_set[T](VecView[T], Int, T) -> Unit
fn VecView::reverse[T](VecView[T]) -> Unit
fn VecView::swap[T](VecView[T], Int, Int) -> Unit

// Traits

// Extension Methods

