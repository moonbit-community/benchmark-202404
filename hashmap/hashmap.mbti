package moonbitlang/core/hashmap

// Values

// Types and methods
type HashMap
fn HashMap::capacity[K, V](HashMap[K, V]) -> Int
fn HashMap::clear[K, V](HashMap[K, V]) -> Unit
fn HashMap::contains[K : Hash + Eq, V](HashMap[K, V], K) -> Bool
fn HashMap::from_array[K : Hash + Eq, V](Array[Tuple[K, V]]) -> HashMap[K, V]
fn HashMap::get[K : Hash + Eq, V](HashMap[K, V], K) -> Option[V]
fn HashMap::get_or_default[K : Hash + Eq, V](HashMap[K, V], K, V) -> V
fn HashMap::is_empty[K, V](HashMap[K, V]) -> Bool
fn HashMap::iter[K, V](HashMap[K, V], (K, V) -> Unit) -> Unit
fn HashMap::iteri[K, V](HashMap[K, V], (Int, K, V) -> Unit) -> Unit
fn HashMap::new[K, V](Option[(K) -> Int]) -> HashMap[K, V]
fn HashMap::op_get[K : Hash + Eq, V](HashMap[K, V], K) -> Option[V]
fn HashMap::op_set[K : Hash + Eq, V](HashMap[K, V], K, V) -> Unit
fn HashMap::remove[K : Hash + Eq, V](HashMap[K, V], K) -> Unit
fn HashMap::set[K : Hash + Eq, V](HashMap[K, V], K, V) -> Unit
fn HashMap::size[K, V](HashMap[K, V]) -> Int

// Traits

// Extension Methods

